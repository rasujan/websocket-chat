{"ast":null,"code":"var _jsxFileName = \"/home/sujan/Development/websockets-chat/webSocketClient/src/index.js\";\nimport ReactDOM from \"react-dom\";\nimport React, { Component } from \"react\";\nimport { w3cwebsocket as w3WebSocket } from \"websocket\";\nimport { Card, Avatar, Input, Typography } from \"antd\";\nimport \"./index.css\";\nimport \"antd/dist/antd.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst client = new w3WebSocket(\"ws://127.0.0.1:8001\");\nconst {\n  Search\n} = Input;\nconst {\n  Text\n} = Typography;\nconst {\n  Meta\n} = Card;\nexport default class App extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      userName: \"\",\n      isLoggedIn: false,\n      messages: [],\n      currentMessage: \"\"\n    };\n\n    this.handleLogin = value => {\n      this.setState({\n        userName: value,\n        isLoggedIn: true\n      });\n    };\n\n    this.handleSendMessage = value => {\n      client.send(JSON.stringify({\n        type: \"message\",\n        message: value,\n        user: this.state.userName\n      }));\n      this.setState({\n        currentMessage: \"\"\n      });\n    };\n  }\n\n  componentDidMount() {\n    client.onopen = () => {\n      console.log(\"websocket client connected 🤝 \");\n    };\n\n    client.onclose = () => {\n      console.log(\"websocket client connection close 🚪  \");\n    };\n\n    client.onmessage = message => {\n      const dataFromServer = JSON.parse(message.data);\n      console.log(`got reply ${dataFromServer}`);\n\n      if (dataFromServer.type === \"message\") {\n        this.setState(state => ({\n          messages: [...state.messages, {\n            message: dataFromServer === null || dataFromServer === void 0 ? void 0 : dataFromServer.message,\n            user: dataFromServer === null || dataFromServer === void 0 ? void 0 : dataFromServer.user\n          }]\n        }));\n      }\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main\",\n      children: this.state.isLoggedIn ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"app-title-container\",\n          children: /*#__PURE__*/_jsxDEV(Text, {\n            className: \"app-title\",\n            type: \"secondary\",\n            children: \"Websocket Chat\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"messages-container\",\n          children: this.state.messages.map(message => /*#__PURE__*/_jsxDEV(Card, {\n            children: /*#__PURE__*/_jsxDEV(Meta, {\n              avatar: /*#__PURE__*/_jsxDEV(Avatar, {\n                style: {\n                  color: \"#f56a00\",\n                  backgroundColor: \"#fde3cf\"\n                },\n                children: message.user[0].toUpperCase()\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 84,\n                columnNumber: 23\n              }, this),\n              title: message.user,\n              description: message.message\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 19\n            }, this)\n          }, message.message, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-input-container\",\n          children: /*#__PURE__*/_jsxDEV(Search, {\n            placeholder: \"Type message here ...\",\n            enterButton: \"send\",\n            size: \"large\",\n            value: this.state.currentMessage,\n            onChange: e => this.setState({\n              currentMessage: e.target.value\n            }),\n            onSearch: value => this.handleSendMessage(value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"login\",\n        children: /*#__PURE__*/_jsxDEV(Search, {\n          placeholder: \"Enter username\",\n          enterButton: \"Login\",\n          size: \"large\",\n          onSearch: value => this.handleLogin(value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this);\n  }\n\n}\nReactDOM.render( /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 125,\n  columnNumber: 17\n}, this), document.getElementById(\"root\"));","map":{"version":3,"sources":["/home/sujan/Development/websockets-chat/webSocketClient/src/index.js"],"names":["ReactDOM","React","Component","w3cwebsocket","w3WebSocket","Card","Avatar","Input","Typography","client","Search","Text","Meta","App","state","userName","isLoggedIn","messages","currentMessage","handleLogin","value","setState","handleSendMessage","send","JSON","stringify","type","message","user","componentDidMount","onopen","console","log","onclose","onmessage","dataFromServer","parse","data","render","map","color","backgroundColor","toUpperCase","e","target","document","getElementById"],"mappings":"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","sourcesContent":["import ReactDOM from \"react-dom\";\nimport React, { Component } from \"react\";\nimport { w3cwebsocket as w3WebSocket } from \"websocket\";\nimport { Card, Avatar, Input, Typography } from \"antd\";\n\nimport \"./index.css\";\nimport \"antd/dist/antd.css\";\n\nconst client = new w3WebSocket(\"ws://127.0.0.1:8001\");\n\nconst { Search } = Input;\nconst { Text } = Typography;\nconst { Meta } = Card;\n\nexport default class App extends Component {\n  state = {\n    userName: \"\",\n    isLoggedIn: false,\n    messages: [],\n    currentMessage: \"\",\n  };\n\n  handleLogin = (value) => {\n    this.setState({\n      userName: value,\n      isLoggedIn: true,\n    });\n  };\n\n  handleSendMessage = (value) => {\n    client.send(\n      JSON.stringify({\n        type: \"message\",\n        message: value,\n        user: this.state.userName,\n      })\n    );\n    this.setState({ currentMessage: \"\" });\n  };\n\n  componentDidMount() {\n    client.onopen = () => {\n      console.log(\"websocket client connected 🤝 \");\n    };\n\n    client.onclose = () => {\n      console.log(\"websocket client connection close 🚪  \");\n    };\n\n    client.onmessage = (message) => {\n      const dataFromServer = JSON.parse(message.data);\n      console.log(`got reply ${dataFromServer}`);\n\n      if (dataFromServer.type === \"message\") {\n        this.setState((state) => ({\n          messages: [\n            ...state.messages,\n            {\n              message: dataFromServer?.message,\n              user: dataFromServer?.user,\n            },\n          ],\n        }));\n      }\n    };\n  }\n\n  render() {\n    return (\n      <div className=\"main\">\n        {this.state.isLoggedIn ? (\n          <div>\n            <div className=\"app-title-container\">\n              <Text className=\"app-title\" type=\"secondary\">\n                Websocket Chat\n              </Text>\n            </div>\n\n            <div className=\"messages-container\">\n              {this.state.messages.map((message) => (\n                <Card key={message.message}>\n                  <Meta\n                    avatar={\n                      <Avatar\n                        style={{ color: \"#f56a00\", backgroundColor: \"#fde3cf\" }}\n                      >\n                        {message.user[0].toUpperCase()}\n                      </Avatar>\n                    }\n                    title={message.user}\n                    description={message.message}\n                  />\n                </Card>\n              ))}\n            </div>\n\n            <div className=\"message-input-container\">\n              <Search\n                placeholder=\"Type message here ...\"\n                enterButton=\"send\"\n                size=\"large\"\n                value={this.state.currentMessage}\n                onChange={(e) =>\n                  this.setState({ currentMessage: e.target.value })\n                }\n                onSearch={(value) => this.handleSendMessage(value)}\n              />\n            </div>\n          </div>\n        ) : (\n          <div className=\"login\">\n            <Search\n              placeholder=\"Enter username\"\n              enterButton=\"Login\"\n              size=\"large\"\n              onSearch={(value) => this.handleLogin(value)}\n            />\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"]},"metadata":{},"sourceType":"module"}